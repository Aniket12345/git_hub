                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Mar 24 2016) (Linux)
                                      4 ; This file was generated Wed Jul 17 22:47:21 2019
                                      5 ;--------------------------------------------------------
                                      6 	.module Uart
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _uart_write
                                     14 	.globl _delay
                                     15 	.globl _strlen
                                     16 ;--------------------------------------------------------
                                     17 ; ram data
                                     18 ;--------------------------------------------------------
                                     19 	.area DATA
                                     20 ;--------------------------------------------------------
                                     21 ; ram data
                                     22 ;--------------------------------------------------------
                                     23 	.area INITIALIZED
                                     24 ;--------------------------------------------------------
                                     25 ; Stack segment in internal ram 
                                     26 ;--------------------------------------------------------
                                     27 	.area	SSEG
      000000                         28 __start__stack:
      000000                         29 	.ds	1
                                     30 
                                     31 ;--------------------------------------------------------
                                     32 ; absolute external ram data
                                     33 ;--------------------------------------------------------
                                     34 	.area DABS (ABS)
                                     35 ;--------------------------------------------------------
                                     36 ; interrupt vector 
                                     37 ;--------------------------------------------------------
                                     38 	.area HOME
      000000                         39 __interrupt_vect:
      000000 82v00u00u00             40 	int s_GSINIT ;reset
      000004 82 00 00 00             41 	int 0x0000 ;trap
      000008 82 00 00 00             42 	int 0x0000 ;int0
      00000C 82 00 00 00             43 	int 0x0000 ;int1
      000010 82 00 00 00             44 	int 0x0000 ;int2
      000014 82 00 00 00             45 	int 0x0000 ;int3
      000018 82 00 00 00             46 	int 0x0000 ;int4
      00001C 82 00 00 00             47 	int 0x0000 ;int5
      000020 82 00 00 00             48 	int 0x0000 ;int6
      000024 82 00 00 00             49 	int 0x0000 ;int7
      000028 82 00 00 00             50 	int 0x0000 ;int8
      00002C 82 00 00 00             51 	int 0x0000 ;int9
      000030 82 00 00 00             52 	int 0x0000 ;int10
      000034 82 00 00 00             53 	int 0x0000 ;int11
      000038 82 00 00 00             54 	int 0x0000 ;int12
      00003C 82 00 00 00             55 	int 0x0000 ;int13
      000040 82 00 00 00             56 	int 0x0000 ;int14
      000044 82 00 00 00             57 	int 0x0000 ;int15
      000048 82 00 00 00             58 	int 0x0000 ;int16
      00004C 82 00 00 00             59 	int 0x0000 ;int17
      000050 82 00 00 00             60 	int 0x0000 ;int18
      000054 82 00 00 00             61 	int 0x0000 ;int19
      000058 82 00 00 00             62 	int 0x0000 ;int20
      00005C 82 00 00 00             63 	int 0x0000 ;int21
      000060 82 00 00 00             64 	int 0x0000 ;int22
      000064 82 00 00 00             65 	int 0x0000 ;int23
      000068 82 00 00 00             66 	int 0x0000 ;int24
      00006C 82 00 00 00             67 	int 0x0000 ;int25
      000070 82 00 00 00             68 	int 0x0000 ;int26
      000074 82 00 00 00             69 	int 0x0000 ;int27
      000078 82 00 00 00             70 	int 0x0000 ;int28
      00007C 82 00 00 00             71 	int 0x0000 ;int29
                                     72 ;--------------------------------------------------------
                                     73 ; global & static initialisations
                                     74 ;--------------------------------------------------------
                                     75 	.area HOME
                                     76 	.area GSINIT
                                     77 	.area GSFINAL
                                     78 	.area GSINIT
      000000                         79 __sdcc_gs_init_startup:
      000000                         80 __sdcc_init_data:
                                     81 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]   82 	ldw x, #l_DATA
      000003 27 07            [ 1]   83 	jreq	00002$
      000005                         84 00001$:
      000005 72 4FuFFuFF      [ 1]   85 	clr (s_DATA - 1, x)
      000009 5A               [ 2]   86 	decw x
      00000A 26 F9            [ 1]   87 	jrne	00001$
      00000C                         88 00002$:
      00000C AEr00r00         [ 2]   89 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]   90 	jreq	00004$
      000011                         91 00003$:
      000011 D6uFFuFF         [ 1]   92 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]   93 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]   94 	decw	x
      000018 26 F7            [ 1]   95 	jrne	00003$
      00001A                         96 00004$:
                                     97 ; stm8_genXINIT() end
                                     98 	.area GSFINAL
      000000 CCr00r80         [ 2]   99 	jp	__sdcc_program_startup
                                    100 ;--------------------------------------------------------
                                    101 ; Home
                                    102 ;--------------------------------------------------------
                                    103 	.area HOME
                                    104 	.area HOME
      000080                        105 __sdcc_program_startup:
      000080 CCr00r6F         [ 2]  106 	jp	_main
                                    107 ;	return from main will return to caller
                                    108 ;--------------------------------------------------------
                                    109 ; code
                                    110 ;--------------------------------------------------------
                                    111 	.area CODE
                                    112 ;	src/Uart.c: 6: void delay(unsigned long count) {
                                    113 ;	-----------------------------------------
                                    114 ;	 function delay
                                    115 ;	-----------------------------------------
      000000                        116 _delay:
      000000 52 08            [ 2]  117 	sub	sp, #8
                                    118 ;	src/Uart.c: 7: while (count--)
      000002 16 0B            [ 2]  119 	ldw	y, (0x0b, sp)
      000004 17 01            [ 2]  120 	ldw	(0x01, sp), y
      000006 1E 0D            [ 2]  121 	ldw	x, (0x0d, sp)
      000008                        122 00101$:
      000008 41               [ 1]  123 	exg	a, xl
      000009 6B 08            [ 1]  124 	ld	(0x08, sp), a
      00000B 41               [ 1]  125 	exg	a, xl
      00000C 16 01            [ 2]  126 	ldw	y, (0x01, sp)
      00000E 17 05            [ 2]  127 	ldw	(0x05, sp), y
      000010 9E               [ 1]  128 	ld	a, xh
      000011 1D 00 01         [ 2]  129 	subw	x, #0x0001
      000014 88               [ 1]  130 	push	a
      000015 7B 03            [ 1]  131 	ld	a, (0x03, sp)
      000017 A2 00            [ 1]  132 	sbc	a, #0x00
      000019 6B 03            [ 1]  133 	ld	(0x03, sp), a
      00001B 7B 02            [ 1]  134 	ld	a, (0x02, sp)
      00001D A2 00            [ 1]  135 	sbc	a, #0x00
      00001F 6B 02            [ 1]  136 	ld	(0x02, sp), a
      000021 84               [ 1]  137 	pop	a
      000022 0D 08            [ 1]  138 	tnz	(0x08, sp)
      000024 26 07            [ 1]  139 	jrne	00115$
      000026 4D               [ 1]  140 	tnz	a
      000027 26 04            [ 1]  141 	jrne	00115$
      000029 16 05            [ 2]  142 	ldw	y, (0x05, sp)
      00002B 27 03            [ 1]  143 	jreq	00104$
      00002D                        144 00115$:
                                    145 ;	src/Uart.c: 8: nop();
      00002D 9D               [ 1]  146 	nop
      00002E 20 D8            [ 2]  147 	jra	00101$
      000030                        148 00104$:
      000030 5B 08            [ 2]  149 	addw	sp, #8
      000032 81               [ 4]  150 	ret
                                    151 ;	src/Uart.c: 11: int uart_write(const char *str) {
                                    152 ;	-----------------------------------------
                                    153 ;	 function uart_write
                                    154 ;	-----------------------------------------
      000033                        155 _uart_write:
      000033 52 03            [ 2]  156 	sub	sp, #3
                                    157 ;	src/Uart.c: 13: for(i = 0; i < strlen(str); i++) {
      000035 0F 01            [ 1]  158 	clr	(0x01, sp)
      000037                        159 00106$:
      000037 1E 06            [ 2]  160 	ldw	x, (0x06, sp)
      000039 89               [ 2]  161 	pushw	x
      00003A CDr00r00         [ 4]  162 	call	_strlen
      00003D 5B 02            [ 2]  163 	addw	sp, #2
      00003F 1F 02            [ 2]  164 	ldw	(0x02, sp), x
      000041 7B 01            [ 1]  165 	ld	a, (0x01, sp)
      000043 97               [ 1]  166 	ld	xl, a
      000044 49               [ 1]  167 	rlc	a
      000045 4F               [ 1]  168 	clr	a
      000046 A2 00            [ 1]  169 	sbc	a, #0x00
      000048 95               [ 1]  170 	ld	xh, a
      000049 13 02            [ 2]  171 	cpw	x, (0x02, sp)
      00004B 24 17            [ 1]  172 	jrnc	00104$
                                    173 ;	src/Uart.c: 14: while(!(UART1_SR & UART_SR_TXE)); // !Transmit data register empty
      00004D                        174 00101$:
      00004D AE 52 30         [ 2]  175 	ldw	x, #0x5230
      000050 F6               [ 1]  176 	ld	a, (x)
      000051 4D               [ 1]  177 	tnz	a
      000052 2A F9            [ 1]  178 	jrpl	00101$
                                    179 ;	src/Uart.c: 15: UART1_DR = str[i];
      000054 5F               [ 1]  180 	clrw	x
      000055 7B 01            [ 1]  181 	ld	a, (0x01, sp)
      000057 97               [ 1]  182 	ld	xl, a
      000058 72 FB 06         [ 2]  183 	addw	x, (0x06, sp)
      00005B F6               [ 1]  184 	ld	a, (x)
      00005C AE 52 31         [ 2]  185 	ldw	x, #0x5231
      00005F F7               [ 1]  186 	ld	(x), a
                                    187 ;	src/Uart.c: 13: for(i = 0; i < strlen(str); i++) {
      000060 0C 01            [ 1]  188 	inc	(0x01, sp)
      000062 20 D3            [ 2]  189 	jra	00106$
      000064                        190 00104$:
                                    191 ;	src/Uart.c: 17: return(i); // Bytes sent
      000064 7B 01            [ 1]  192 	ld	a, (0x01, sp)
      000066 97               [ 1]  193 	ld	xl, a
      000067 49               [ 1]  194 	rlc	a
      000068 4F               [ 1]  195 	clr	a
      000069 A2 00            [ 1]  196 	sbc	a, #0x00
      00006B 95               [ 1]  197 	ld	xh, a
      00006C 5B 03            [ 2]  198 	addw	sp, #3
      00006E 81               [ 4]  199 	ret
                                    200 ;	src/Uart.c: 20: int main(void)
                                    201 ;	-----------------------------------------
                                    202 ;	 function main
                                    203 ;	-----------------------------------------
      00006F                        204 _main:
                                    205 ;	src/Uart.c: 23: CLK_CKDIVR = 0;
      00006F 35 00 50 C6      [ 1]  206 	mov	0x50c6+0, #0x00
                                    207 ;	src/Uart.c: 26: UART1_CR2 |= UART_CR2_TEN; // Transmitter enable
      000073 AE 52 35         [ 2]  208 	ldw	x, #0x5235
      000076 F6               [ 1]  209 	ld	a, (x)
      000077 AA 08            [ 1]  210 	or	a, #0x08
      000079 F7               [ 1]  211 	ld	(x), a
                                    212 ;	src/Uart.c: 28: UART1_CR3 &= ~(UART_CR3_STOP1 | UART_CR3_STOP2); // 1 stop bit
      00007A AE 52 36         [ 2]  213 	ldw	x, #0x5236
      00007D F6               [ 1]  214 	ld	a, (x)
      00007E A4 CF            [ 1]  215 	and	a, #0xcf
      000080 F7               [ 1]  216 	ld	(x), a
                                    217 ;	src/Uart.c: 30: UART1_BRR2 = 0x03; UART1_BRR1 = 0x68; // 0x0683 coded funky way (see ref manual)
      000081 35 03 52 33      [ 1]  218 	mov	0x5233+0, #0x03
      000085 35 68 52 32      [ 1]  219 	mov	0x5232+0, #0x68
                                    220 ;	src/Uart.c: 32: while(1) {
      000089                        221 00102$:
                                    222 ;	src/Uart.c: 33: uart_write("Hello World!\r\n");
      000089 AEr00rA2         [ 2]  223 	ldw	x, #___str_0+0
      00008C 89               [ 2]  224 	pushw	x
      00008D CDr00r33         [ 4]  225 	call	_uart_write
      000090 5B 02            [ 2]  226 	addw	sp, #2
                                    227 ;	src/Uart.c: 34: delay(400000L);
      000092 4B 80            [ 1]  228 	push	#0x80
      000094 4B 1A            [ 1]  229 	push	#0x1a
      000096 4B 06            [ 1]  230 	push	#0x06
      000098 4B 00            [ 1]  231 	push	#0x00
      00009A CDr00r00         [ 4]  232 	call	_delay
      00009D 5B 04            [ 2]  233 	addw	sp, #4
      00009F 20 E8            [ 2]  234 	jra	00102$
      0000A1 81               [ 4]  235 	ret
                                    236 	.area CODE
      0000A2                        237 ___str_0:
      0000A2 48 65 6C 6C 6F 20 57   238 	.ascii "Hello World!"
             6F 72 6C 64 21
      0000AE 0D                     239 	.db 0x0D
      0000AF 0A                     240 	.db 0x0A
      0000B0 00                     241 	.db 0x00
                                    242 	.area INITIALIZER
                                    243 	.area CABS (ABS)
