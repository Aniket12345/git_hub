                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Mar 24 2016) (Linux)
                                      4 ; This file was generated Mon Jul 22 00:37:31 2019
                                      5 ;--------------------------------------------------------
                                      6 	.module blink
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _delay
                                     14 	.globl _Initialise_System_Clock
                                     15 ;--------------------------------------------------------
                                     16 ; ram data
                                     17 ;--------------------------------------------------------
                                     18 	.area DATA
                                     19 ;--------------------------------------------------------
                                     20 ; ram data
                                     21 ;--------------------------------------------------------
                                     22 	.area INITIALIZED
                                     23 ;--------------------------------------------------------
                                     24 ; Stack segment in internal ram 
                                     25 ;--------------------------------------------------------
                                     26 	.area	SSEG
      008157                         27 __start__stack:
      008157                         28 	.ds	1
                                     29 
                                     30 ;--------------------------------------------------------
                                     31 ; absolute external ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DABS (ABS)
                                     34 ;--------------------------------------------------------
                                     35 ; interrupt vector 
                                     36 ;--------------------------------------------------------
                                     37 	.area HOME
      008000                         38 __interrupt_vect:
      008000 82 00 80 83             39 	int s_GSINIT ;reset
      008004 82 00 00 00             40 	int 0x0000 ;trap
      008008 82 00 00 00             41 	int 0x0000 ;int0
      00800C 82 00 00 00             42 	int 0x0000 ;int1
      008010 82 00 00 00             43 	int 0x0000 ;int2
      008014 82 00 00 00             44 	int 0x0000 ;int3
      008018 82 00 00 00             45 	int 0x0000 ;int4
      00801C 82 00 00 00             46 	int 0x0000 ;int5
      008020 82 00 00 00             47 	int 0x0000 ;int6
      008024 82 00 00 00             48 	int 0x0000 ;int7
      008028 82 00 00 00             49 	int 0x0000 ;int8
      00802C 82 00 00 00             50 	int 0x0000 ;int9
      008030 82 00 00 00             51 	int 0x0000 ;int10
      008034 82 00 00 00             52 	int 0x0000 ;int11
      008038 82 00 00 00             53 	int 0x0000 ;int12
      00803C 82 00 00 00             54 	int 0x0000 ;int13
      008040 82 00 00 00             55 	int 0x0000 ;int14
      008044 82 00 00 00             56 	int 0x0000 ;int15
      008048 82 00 00 00             57 	int 0x0000 ;int16
      00804C 82 00 00 00             58 	int 0x0000 ;int17
      008050 82 00 00 00             59 	int 0x0000 ;int18
      008054 82 00 00 00             60 	int 0x0000 ;int19
      008058 82 00 00 00             61 	int 0x0000 ;int20
      00805C 82 00 00 00             62 	int 0x0000 ;int21
      008060 82 00 00 00             63 	int 0x0000 ;int22
      008064 82 00 00 00             64 	int 0x0000 ;int23
      008068 82 00 00 00             65 	int 0x0000 ;int24
      00806C 82 00 00 00             66 	int 0x0000 ;int25
      008070 82 00 00 00             67 	int 0x0000 ;int26
      008074 82 00 00 00             68 	int 0x0000 ;int27
      008078 82 00 00 00             69 	int 0x0000 ;int28
      00807C 82 00 00 00             70 	int 0x0000 ;int29
                                     71 ;--------------------------------------------------------
                                     72 ; global & static initialisations
                                     73 ;--------------------------------------------------------
                                     74 	.area HOME
                                     75 	.area GSINIT
                                     76 	.area GSFINAL
                                     77 	.area GSINIT
      008083                         78 __sdcc_gs_init_startup:
      008083                         79 __sdcc_init_data:
                                     80 ; stm8_genXINIT() start
      008083 AE 00 00         [ 2]   81 	ldw x, #l_DATA
      008086 27 07            [ 1]   82 	jreq	00002$
      008088                         83 00001$:
      008088 72 4F 00 00      [ 1]   84 	clr (s_DATA - 1, x)
      00808C 5A               [ 2]   85 	decw x
      00808D 26 F9            [ 1]   86 	jrne	00001$
      00808F                         87 00002$:
      00808F AE 00 00         [ 2]   88 	ldw	x, #l_INITIALIZER
      008092 27 09            [ 1]   89 	jreq	00004$
      008094                         90 00003$:
      008094 D6 81 56         [ 1]   91 	ld	a, (s_INITIALIZER - 1, x)
      008097 D7 00 00         [ 1]   92 	ld	(s_INITIALIZED - 1, x), a
      00809A 5A               [ 2]   93 	decw	x
      00809B 26 F7            [ 1]   94 	jrne	00003$
      00809D                         95 00004$:
                                     96 ; stm8_genXINIT() end
                                     97 	.area GSFINAL
      00809D CC 80 80         [ 2]   98 	jp	__sdcc_program_startup
                                     99 ;--------------------------------------------------------
                                    100 ; Home
                                    101 ;--------------------------------------------------------
                                    102 	.area HOME
                                    103 	.area HOME
      008080                        104 __sdcc_program_startup:
      008080 CC 81 1B         [ 2]  105 	jp	_main
                                    106 ;	return from main will return to caller
                                    107 ;--------------------------------------------------------
                                    108 ; code
                                    109 ;--------------------------------------------------------
                                    110 	.area CODE
                                    111 ;	src/blink.c: 17: void delay(unsigned long count) {
                                    112 ;	-----------------------------------------
                                    113 ;	 function delay
                                    114 ;	-----------------------------------------
      0080E8                        115 _delay:
      0080E8 52 08            [ 2]  116 	sub	sp, #8
                                    117 ;	src/blink.c: 18: while (count--)
      0080EA 16 0B            [ 2]  118 	ldw	y, (0x0b, sp)
      0080EC 17 01            [ 2]  119 	ldw	(0x01, sp), y
      0080EE 1E 0D            [ 2]  120 	ldw	x, (0x0d, sp)
      0080F0                        121 00101$:
      0080F0 41               [ 1]  122 	exg	a, xl
      0080F1 6B 08            [ 1]  123 	ld	(0x08, sp), a
      0080F3 41               [ 1]  124 	exg	a, xl
      0080F4 16 01            [ 2]  125 	ldw	y, (0x01, sp)
      0080F6 17 05            [ 2]  126 	ldw	(0x05, sp), y
      0080F8 9E               [ 1]  127 	ld	a, xh
      0080F9 1D 00 01         [ 2]  128 	subw	x, #0x0001
      0080FC 88               [ 1]  129 	push	a
      0080FD 7B 03            [ 1]  130 	ld	a, (0x03, sp)
      0080FF A2 00            [ 1]  131 	sbc	a, #0x00
      008101 6B 03            [ 1]  132 	ld	(0x03, sp), a
      008103 7B 02            [ 1]  133 	ld	a, (0x02, sp)
      008105 A2 00            [ 1]  134 	sbc	a, #0x00
      008107 6B 02            [ 1]  135 	ld	(0x02, sp), a
      008109 84               [ 1]  136 	pop	a
      00810A 0D 08            [ 1]  137 	tnz	(0x08, sp)
      00810C 26 07            [ 1]  138 	jrne	00115$
      00810E 4D               [ 1]  139 	tnz	a
      00810F 26 04            [ 1]  140 	jrne	00115$
      008111 16 05            [ 2]  141 	ldw	y, (0x05, sp)
      008113 27 03            [ 1]  142 	jreq	00104$
      008115                        143 00115$:
                                    144 ;	src/blink.c: 19: nop();
      008115 9D               [ 1]  145 	nop
      008116 20 D8            [ 2]  146 	jra	00101$
      008118                        147 00104$:
      008118 5B 08            [ 2]  148 	addw	sp, #8
      00811A 81               [ 4]  149 	ret
                                    150 ;	src/blink.c: 22: int main(void)
                                    151 ;	-----------------------------------------
                                    152 ;	 function main
                                    153 ;	-----------------------------------------
      00811B                        154 _main:
                                    155 ;	src/blink.c: 25: Initialise_System_Clock();
      00811B CD 80 A0         [ 4]  156 	call	_Initialise_System_Clock
                                    157 ;	src/blink.c: 29: PORT(LED_PORT, DDR)  |= LED_PIN; // i.e. PB_DDR |= (1 << 5);
      00811E AE 50 07         [ 2]  158 	ldw	x, #0x5007
      008121 F6               [ 1]  159 	ld	a, (x)
      008122 AA 20            [ 1]  160 	or	a, #0x20
      008124 F7               [ 1]  161 	ld	(x), a
                                    162 ;	src/blink.c: 31: PORT(LED_PORT, CR1)  |= LED_PIN; // i.e. PB_CR1 |= (1 << 5);
      008125 AE 50 08         [ 2]  163 	ldw	x, #0x5008
      008128 F6               [ 1]  164 	ld	a, (x)
      008129 AA 20            [ 1]  165 	or	a, #0x20
      00812B F7               [ 1]  166 	ld	(x), a
                                    167 ;	src/blink.c: 33: while(1) {
      00812C                        168 00102$:
                                    169 ;	src/blink.c: 35: PORT(LED_PORT, ODR) |= LED_PIN; // PB_ODR |= (1 << 5);
      00812C AE 50 05         [ 2]  170 	ldw	x, #0x5005
      00812F F6               [ 1]  171 	ld	a, (x)
      008130 AA 20            [ 1]  172 	or	a, #0x20
      008132 F7               [ 1]  173 	ld	(x), a
                                    174 ;	src/blink.c: 36: delay(100000L);
      008133 4B A0            [ 1]  175 	push	#0xa0
      008135 4B 86            [ 1]  176 	push	#0x86
      008137 4B 01            [ 1]  177 	push	#0x01
      008139 4B 00            [ 1]  178 	push	#0x00
      00813B CD 80 E8         [ 4]  179 	call	_delay
      00813E 5B 04            [ 2]  180 	addw	sp, #4
                                    181 ;	src/blink.c: 38: PORT(LED_PORT, ODR) &= ~LED_PIN; // PB_ODR &= ~(1 << 5);
      008140 AE 50 05         [ 2]  182 	ldw	x, #0x5005
      008143 F6               [ 1]  183 	ld	a, (x)
      008144 A4 DF            [ 1]  184 	and	a, #0xdf
      008146 F7               [ 1]  185 	ld	(x), a
                                    186 ;	src/blink.c: 39: delay(300000L);
      008147 4B E0            [ 1]  187 	push	#0xe0
      008149 4B 93            [ 1]  188 	push	#0x93
      00814B 4B 04            [ 1]  189 	push	#0x04
      00814D 4B 00            [ 1]  190 	push	#0x00
      00814F CD 80 E8         [ 4]  191 	call	_delay
      008152 5B 04            [ 2]  192 	addw	sp, #4
      008154 20 D6            [ 2]  193 	jra	00102$
      008156 81               [ 4]  194 	ret
                                    195 	.area CODE
                                    196 	.area INITIALIZER
                                    197 	.area CABS (ABS)
