                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Mar 24 2016) (Linux)
                                      4 ; This file was generated Mon Jul 22 00:37:31 2019
                                      5 ;--------------------------------------------------------
                                      6 	.module blink
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _delay
                                     14 	.globl _Initialise_System_Clock
                                     15 ;--------------------------------------------------------
                                     16 ; ram data
                                     17 ;--------------------------------------------------------
                                     18 	.area DATA
                                     19 ;--------------------------------------------------------
                                     20 ; ram data
                                     21 ;--------------------------------------------------------
                                     22 	.area INITIALIZED
                                     23 ;--------------------------------------------------------
                                     24 ; Stack segment in internal ram 
                                     25 ;--------------------------------------------------------
                                     26 	.area	SSEG
      000000                         27 __start__stack:
      000000                         28 	.ds	1
                                     29 
                                     30 ;--------------------------------------------------------
                                     31 ; absolute external ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DABS (ABS)
                                     34 ;--------------------------------------------------------
                                     35 ; interrupt vector 
                                     36 ;--------------------------------------------------------
                                     37 	.area HOME
      000000                         38 __interrupt_vect:
      000000 82v00u00u00             39 	int s_GSINIT ;reset
      000004 82 00 00 00             40 	int 0x0000 ;trap
      000008 82 00 00 00             41 	int 0x0000 ;int0
      00000C 82 00 00 00             42 	int 0x0000 ;int1
      000010 82 00 00 00             43 	int 0x0000 ;int2
      000014 82 00 00 00             44 	int 0x0000 ;int3
      000018 82 00 00 00             45 	int 0x0000 ;int4
      00001C 82 00 00 00             46 	int 0x0000 ;int5
      000020 82 00 00 00             47 	int 0x0000 ;int6
      000024 82 00 00 00             48 	int 0x0000 ;int7
      000028 82 00 00 00             49 	int 0x0000 ;int8
      00002C 82 00 00 00             50 	int 0x0000 ;int9
      000030 82 00 00 00             51 	int 0x0000 ;int10
      000034 82 00 00 00             52 	int 0x0000 ;int11
      000038 82 00 00 00             53 	int 0x0000 ;int12
      00003C 82 00 00 00             54 	int 0x0000 ;int13
      000040 82 00 00 00             55 	int 0x0000 ;int14
      000044 82 00 00 00             56 	int 0x0000 ;int15
      000048 82 00 00 00             57 	int 0x0000 ;int16
      00004C 82 00 00 00             58 	int 0x0000 ;int17
      000050 82 00 00 00             59 	int 0x0000 ;int18
      000054 82 00 00 00             60 	int 0x0000 ;int19
      000058 82 00 00 00             61 	int 0x0000 ;int20
      00005C 82 00 00 00             62 	int 0x0000 ;int21
      000060 82 00 00 00             63 	int 0x0000 ;int22
      000064 82 00 00 00             64 	int 0x0000 ;int23
      000068 82 00 00 00             65 	int 0x0000 ;int24
      00006C 82 00 00 00             66 	int 0x0000 ;int25
      000070 82 00 00 00             67 	int 0x0000 ;int26
      000074 82 00 00 00             68 	int 0x0000 ;int27
      000078 82 00 00 00             69 	int 0x0000 ;int28
      00007C 82 00 00 00             70 	int 0x0000 ;int29
                                     71 ;--------------------------------------------------------
                                     72 ; global & static initialisations
                                     73 ;--------------------------------------------------------
                                     74 	.area HOME
                                     75 	.area GSINIT
                                     76 	.area GSFINAL
                                     77 	.area GSINIT
      000000                         78 __sdcc_gs_init_startup:
      000000                         79 __sdcc_init_data:
                                     80 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]   81 	ldw x, #l_DATA
      000003 27 07            [ 1]   82 	jreq	00002$
      000005                         83 00001$:
      000005 72 4FuFFuFF      [ 1]   84 	clr (s_DATA - 1, x)
      000009 5A               [ 2]   85 	decw x
      00000A 26 F9            [ 1]   86 	jrne	00001$
      00000C                         87 00002$:
      00000C AEr00r00         [ 2]   88 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]   89 	jreq	00004$
      000011                         90 00003$:
      000011 D6uFFuFF         [ 1]   91 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]   92 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]   93 	decw	x
      000018 26 F7            [ 1]   94 	jrne	00003$
      00001A                         95 00004$:
                                     96 ; stm8_genXINIT() end
                                     97 	.area GSFINAL
      000000 CCr00r80         [ 2]   98 	jp	__sdcc_program_startup
                                     99 ;--------------------------------------------------------
                                    100 ; Home
                                    101 ;--------------------------------------------------------
                                    102 	.area HOME
                                    103 	.area HOME
      000080                        104 __sdcc_program_startup:
      000080 CCr00r33         [ 2]  105 	jp	_main
                                    106 ;	return from main will return to caller
                                    107 ;--------------------------------------------------------
                                    108 ; code
                                    109 ;--------------------------------------------------------
                                    110 	.area CODE
                                    111 ;	src/blink.c: 17: void delay(unsigned long count) {
                                    112 ;	-----------------------------------------
                                    113 ;	 function delay
                                    114 ;	-----------------------------------------
      000000                        115 _delay:
      000000 52 08            [ 2]  116 	sub	sp, #8
                                    117 ;	src/blink.c: 18: while (count--)
      000002 16 0B            [ 2]  118 	ldw	y, (0x0b, sp)
      000004 17 01            [ 2]  119 	ldw	(0x01, sp), y
      000006 1E 0D            [ 2]  120 	ldw	x, (0x0d, sp)
      000008                        121 00101$:
      000008 41               [ 1]  122 	exg	a, xl
      000009 6B 08            [ 1]  123 	ld	(0x08, sp), a
      00000B 41               [ 1]  124 	exg	a, xl
      00000C 16 01            [ 2]  125 	ldw	y, (0x01, sp)
      00000E 17 05            [ 2]  126 	ldw	(0x05, sp), y
      000010 9E               [ 1]  127 	ld	a, xh
      000011 1D 00 01         [ 2]  128 	subw	x, #0x0001
      000014 88               [ 1]  129 	push	a
      000015 7B 03            [ 1]  130 	ld	a, (0x03, sp)
      000017 A2 00            [ 1]  131 	sbc	a, #0x00
      000019 6B 03            [ 1]  132 	ld	(0x03, sp), a
      00001B 7B 02            [ 1]  133 	ld	a, (0x02, sp)
      00001D A2 00            [ 1]  134 	sbc	a, #0x00
      00001F 6B 02            [ 1]  135 	ld	(0x02, sp), a
      000021 84               [ 1]  136 	pop	a
      000022 0D 08            [ 1]  137 	tnz	(0x08, sp)
      000024 26 07            [ 1]  138 	jrne	00115$
      000026 4D               [ 1]  139 	tnz	a
      000027 26 04            [ 1]  140 	jrne	00115$
      000029 16 05            [ 2]  141 	ldw	y, (0x05, sp)
      00002B 27 03            [ 1]  142 	jreq	00104$
      00002D                        143 00115$:
                                    144 ;	src/blink.c: 19: nop();
      00002D 9D               [ 1]  145 	nop
      00002E 20 D8            [ 2]  146 	jra	00101$
      000030                        147 00104$:
      000030 5B 08            [ 2]  148 	addw	sp, #8
      000032 81               [ 4]  149 	ret
                                    150 ;	src/blink.c: 22: int main(void)
                                    151 ;	-----------------------------------------
                                    152 ;	 function main
                                    153 ;	-----------------------------------------
      000033                        154 _main:
                                    155 ;	src/blink.c: 25: Initialise_System_Clock();
      000033 CDr00r00         [ 4]  156 	call	_Initialise_System_Clock
                                    157 ;	src/blink.c: 29: PORT(LED_PORT, DDR)  |= LED_PIN; // i.e. PB_DDR |= (1 << 5);
      000036 AE 50 07         [ 2]  158 	ldw	x, #0x5007
      000039 F6               [ 1]  159 	ld	a, (x)
      00003A AA 20            [ 1]  160 	or	a, #0x20
      00003C F7               [ 1]  161 	ld	(x), a
                                    162 ;	src/blink.c: 31: PORT(LED_PORT, CR1)  |= LED_PIN; // i.e. PB_CR1 |= (1 << 5);
      00003D AE 50 08         [ 2]  163 	ldw	x, #0x5008
      000040 F6               [ 1]  164 	ld	a, (x)
      000041 AA 20            [ 1]  165 	or	a, #0x20
      000043 F7               [ 1]  166 	ld	(x), a
                                    167 ;	src/blink.c: 33: while(1) {
      000044                        168 00102$:
                                    169 ;	src/blink.c: 35: PORT(LED_PORT, ODR) |= LED_PIN; // PB_ODR |= (1 << 5);
      000044 AE 50 05         [ 2]  170 	ldw	x, #0x5005
      000047 F6               [ 1]  171 	ld	a, (x)
      000048 AA 20            [ 1]  172 	or	a, #0x20
      00004A F7               [ 1]  173 	ld	(x), a
                                    174 ;	src/blink.c: 36: delay(100000L);
      00004B 4B A0            [ 1]  175 	push	#0xa0
      00004D 4B 86            [ 1]  176 	push	#0x86
      00004F 4B 01            [ 1]  177 	push	#0x01
      000051 4B 00            [ 1]  178 	push	#0x00
      000053 CDr00r00         [ 4]  179 	call	_delay
      000056 5B 04            [ 2]  180 	addw	sp, #4
                                    181 ;	src/blink.c: 38: PORT(LED_PORT, ODR) &= ~LED_PIN; // PB_ODR &= ~(1 << 5);
      000058 AE 50 05         [ 2]  182 	ldw	x, #0x5005
      00005B F6               [ 1]  183 	ld	a, (x)
      00005C A4 DF            [ 1]  184 	and	a, #0xdf
      00005E F7               [ 1]  185 	ld	(x), a
                                    186 ;	src/blink.c: 39: delay(300000L);
      00005F 4B E0            [ 1]  187 	push	#0xe0
      000061 4B 93            [ 1]  188 	push	#0x93
      000063 4B 04            [ 1]  189 	push	#0x04
      000065 4B 00            [ 1]  190 	push	#0x00
      000067 CDr00r00         [ 4]  191 	call	_delay
      00006A 5B 04            [ 2]  192 	addw	sp, #4
      00006C 20 D6            [ 2]  193 	jra	00102$
      00006E 81               [ 4]  194 	ret
                                    195 	.area CODE
                                    196 	.area INITIALIZER
                                    197 	.area CABS (ABS)
