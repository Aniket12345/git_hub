                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Mar 24 2016) (Linux)
                                      4 ; This file was generated Sun Jul 21 01:22:08 2019
                                      5 ;--------------------------------------------------------
                                      6 	.module blink
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _delay
                                     14 ;--------------------------------------------------------
                                     15 ; ram data
                                     16 ;--------------------------------------------------------
                                     17 	.area DATA
                                     18 ;--------------------------------------------------------
                                     19 ; ram data
                                     20 ;--------------------------------------------------------
                                     21 	.area INITIALIZED
                                     22 ;--------------------------------------------------------
                                     23 ; Stack segment in internal ram 
                                     24 ;--------------------------------------------------------
                                     25 	.area	SSEG
      000001                         26 __start__stack:
      000001                         27 	.ds	1
                                     28 
                                     29 ;--------------------------------------------------------
                                     30 ; absolute external ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DABS (ABS)
                                     33 ;--------------------------------------------------------
                                     34 ; interrupt vector 
                                     35 ;--------------------------------------------------------
                                     36 	.area HOME
      008000                         37 __interrupt_vect:
      008000 82 00 80 83             38 	int s_GSINIT ;reset
      008004 82 00 00 00             39 	int 0x0000 ;trap
      008008 82 00 00 00             40 	int 0x0000 ;int0
      00800C 82 00 00 00             41 	int 0x0000 ;int1
      008010 82 00 00 00             42 	int 0x0000 ;int2
      008014 82 00 00 00             43 	int 0x0000 ;int3
      008018 82 00 00 00             44 	int 0x0000 ;int4
      00801C 82 00 00 00             45 	int 0x0000 ;int5
      008020 82 00 00 00             46 	int 0x0000 ;int6
      008024 82 00 00 00             47 	int 0x0000 ;int7
      008028 82 00 00 00             48 	int 0x0000 ;int8
      00802C 82 00 00 00             49 	int 0x0000 ;int9
      008030 82 00 00 00             50 	int 0x0000 ;int10
      008034 82 00 00 00             51 	int 0x0000 ;int11
      008038 82 00 00 00             52 	int 0x0000 ;int12
      00803C 82 00 00 00             53 	int 0x0000 ;int13
      008040 82 00 00 00             54 	int 0x0000 ;int14
      008044 82 00 00 00             55 	int 0x0000 ;int15
      008048 82 00 00 00             56 	int 0x0000 ;int16
      00804C 82 00 00 00             57 	int 0x0000 ;int17
      008050 82 00 00 00             58 	int 0x0000 ;int18
      008054 82 00 00 00             59 	int 0x0000 ;int19
      008058 82 00 00 00             60 	int 0x0000 ;int20
      00805C 82 00 00 00             61 	int 0x0000 ;int21
      008060 82 00 00 00             62 	int 0x0000 ;int22
      008064 82 00 00 00             63 	int 0x0000 ;int23
      008068 82 00 00 00             64 	int 0x0000 ;int24
      00806C 82 00 00 00             65 	int 0x0000 ;int25
      008070 82 00 00 00             66 	int 0x0000 ;int26
      008074 82 00 00 00             67 	int 0x0000 ;int27
      008078 82 00 00 00             68 	int 0x0000 ;int28
      00807C 82 00 00 00             69 	int 0x0000 ;int29
                                     70 ;--------------------------------------------------------
                                     71 ; global & static initialisations
                                     72 ;--------------------------------------------------------
                                     73 	.area HOME
                                     74 	.area GSINIT
                                     75 	.area GSFINAL
                                     76 	.area GSINIT
      008083                         77 __sdcc_gs_init_startup:
      008083                         78 __sdcc_init_data:
                                     79 ; stm8_genXINIT() start
      008083 AE 00 00         [ 2]   80 	ldw x, #l_DATA
      008086 27 07            [ 1]   81 	jreq	00002$
      008088                         82 00001$:
      008088 72 4F 00 00      [ 1]   83 	clr (s_DATA - 1, x)
      00808C 5A               [ 2]   84 	decw x
      00808D 26 F9            [ 1]   85 	jrne	00001$
      00808F                         86 00002$:
      00808F AE 00 00         [ 2]   87 	ldw	x, #l_INITIALIZER
      008092 27 09            [ 1]   88 	jreq	00004$
      008094                         89 00003$:
      008094 D6 81 0F         [ 1]   90 	ld	a, (s_INITIALIZER - 1, x)
      008097 D7 00 00         [ 1]   91 	ld	(s_INITIALIZED - 1, x), a
      00809A 5A               [ 2]   92 	decw	x
      00809B 26 F7            [ 1]   93 	jrne	00003$
      00809D                         94 00004$:
                                     95 ; stm8_genXINIT() end
                                     96 	.area GSFINAL
      00809D CC 80 80         [ 2]   97 	jp	__sdcc_program_startup
                                     98 ;--------------------------------------------------------
                                     99 ; Home
                                    100 ;--------------------------------------------------------
                                    101 	.area HOME
                                    102 	.area HOME
      008080                        103 __sdcc_program_startup:
      008080 CC 80 D3         [ 2]  104 	jp	_main
                                    105 ;	return from main will return to caller
                                    106 ;--------------------------------------------------------
                                    107 ; code
                                    108 ;--------------------------------------------------------
                                    109 	.area CODE
                                    110 ;	src/blink.c: 16: void delay(unsigned long count) {
                                    111 ;	-----------------------------------------
                                    112 ;	 function delay
                                    113 ;	-----------------------------------------
      0080A0                        114 _delay:
      0080A0 52 08            [ 2]  115 	sub	sp, #8
                                    116 ;	src/blink.c: 17: while (count--)
      0080A2 16 0B            [ 2]  117 	ldw	y, (0x0b, sp)
      0080A4 17 05            [ 2]  118 	ldw	(0x05, sp), y
      0080A6 1E 0D            [ 2]  119 	ldw	x, (0x0d, sp)
      0080A8                        120 00101$:
      0080A8 41               [ 1]  121 	exg	a, xl
      0080A9 6B 04            [ 1]  122 	ld	(0x04, sp), a
      0080AB 41               [ 1]  123 	exg	a, xl
      0080AC 16 05            [ 2]  124 	ldw	y, (0x05, sp)
      0080AE 17 01            [ 2]  125 	ldw	(0x01, sp), y
      0080B0 9E               [ 1]  126 	ld	a, xh
      0080B1 1D 00 01         [ 2]  127 	subw	x, #0x0001
      0080B4 88               [ 1]  128 	push	a
      0080B5 7B 07            [ 1]  129 	ld	a, (0x07, sp)
      0080B7 A2 00            [ 1]  130 	sbc	a, #0x00
      0080B9 6B 07            [ 1]  131 	ld	(0x07, sp), a
      0080BB 7B 06            [ 1]  132 	ld	a, (0x06, sp)
      0080BD A2 00            [ 1]  133 	sbc	a, #0x00
      0080BF 6B 06            [ 1]  134 	ld	(0x06, sp), a
      0080C1 84               [ 1]  135 	pop	a
      0080C2 0D 04            [ 1]  136 	tnz	(0x04, sp)
      0080C4 26 07            [ 1]  137 	jrne	00115$
      0080C6 4D               [ 1]  138 	tnz	a
      0080C7 26 04            [ 1]  139 	jrne	00115$
      0080C9 16 01            [ 2]  140 	ldw	y, (0x01, sp)
      0080CB 27 03            [ 1]  141 	jreq	00104$
      0080CD                        142 00115$:
                                    143 ;	src/blink.c: 18: nop();
      0080CD 9D               [ 1]  144 	nop
      0080CE 20 D8            [ 2]  145 	jra	00101$
      0080D0                        146 00104$:
      0080D0 5B 08            [ 2]  147 	addw	sp, #8
      0080D2 81               [ 4]  148 	ret
                                    149 ;	src/blink.c: 21: int main(void)
                                    150 ;	-----------------------------------------
                                    151 ;	 function main
                                    152 ;	-----------------------------------------
      0080D3                        153 _main:
                                    154 ;	src/blink.c: 24: CLK_CKDIVR = 0;
      0080D3 35 00 50 C6      [ 1]  155 	mov	0x50c6+0, #0x00
                                    156 ;	src/blink.c: 28: PORT(LED_PORT, DDR)  |= LED_PIN; // i.e. PB_DDR |= (1 << 5);
      0080D7 AE 50 07         [ 2]  157 	ldw	x, #0x5007
      0080DA F6               [ 1]  158 	ld	a, (x)
      0080DB AA 20            [ 1]  159 	or	a, #0x20
      0080DD F7               [ 1]  160 	ld	(x), a
                                    161 ;	src/blink.c: 30: PORT(LED_PORT, CR1)  |= LED_PIN; // i.e. PB_CR1 |= (1 << 5);
      0080DE AE 50 08         [ 2]  162 	ldw	x, #0x5008
      0080E1 F6               [ 1]  163 	ld	a, (x)
      0080E2 AA 20            [ 1]  164 	or	a, #0x20
      0080E4 F7               [ 1]  165 	ld	(x), a
                                    166 ;	src/blink.c: 32: while(1) {
      0080E5                        167 00102$:
                                    168 ;	src/blink.c: 34: PORT(LED_PORT, ODR) |= LED_PIN; // PB_ODR |= (1 << 5);
      0080E5 AE 50 05         [ 2]  169 	ldw	x, #0x5005
      0080E8 F6               [ 1]  170 	ld	a, (x)
      0080E9 AA 20            [ 1]  171 	or	a, #0x20
      0080EB F7               [ 1]  172 	ld	(x), a
                                    173 ;	src/blink.c: 35: delay(100000L);
      0080EC 4B A0            [ 1]  174 	push	#0xa0
      0080EE 4B 86            [ 1]  175 	push	#0x86
      0080F0 4B 01            [ 1]  176 	push	#0x01
      0080F2 4B 00            [ 1]  177 	push	#0x00
      0080F4 CD 80 A0         [ 4]  178 	call	_delay
      0080F7 5B 04            [ 2]  179 	addw	sp, #4
                                    180 ;	src/blink.c: 37: PORT(LED_PORT, ODR) &= ~LED_PIN; // PB_ODR &= ~(1 << 5);
      0080F9 AE 50 05         [ 2]  181 	ldw	x, #0x5005
      0080FC F6               [ 1]  182 	ld	a, (x)
      0080FD A4 DF            [ 1]  183 	and	a, #0xdf
      0080FF F7               [ 1]  184 	ld	(x), a
                                    185 ;	src/blink.c: 38: delay(300000L);
      008100 4B E0            [ 1]  186 	push	#0xe0
      008102 4B 93            [ 1]  187 	push	#0x93
      008104 4B 04            [ 1]  188 	push	#0x04
      008106 4B 00            [ 1]  189 	push	#0x00
      008108 CD 80 A0         [ 4]  190 	call	_delay
      00810B 5B 04            [ 2]  191 	addw	sp, #4
      00810D 20 D6            [ 2]  192 	jra	00102$
      00810F 81               [ 4]  193 	ret
                                    194 	.area CODE
                                    195 	.area INITIALIZER
                                    196 	.area CABS (ABS)
